<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	
	<!-- For Using Properties File -->    
    <beans:bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:datasource.properties</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<beans:bean class="com.rusticisoftware.hostedengine.client.ScormEngineService" name="scormEngineService">
		<beans:constructor-arg index="0" value="http://localhost:9080/EngineWebServices/"></beans:constructor-arg>
		<beans:constructor-arg index="1" value="appID"></beans:constructor-arg>
		<beans:constructor-arg index="2" value="password"></beans:constructor-arg>
		
	</beans:bean>
	<context:component-scan base-package="in.xebia.poc" />
	
	<!-- Using JPA to persist objects with Hibernate as engine -->
    <beans:bean id="entityManagerFactory" 
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
        p:dataSource-ref="dataSource"> 
        <beans:property name="persistenceUnitName" value="pocRepository" ></beans:property>
        <beans:property name="jpaProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
				<beans:prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</beans:prop>
				<beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
    
    <!-- Database Properties -->
    <beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName">
			<beans:value>${dataSource.driverClassName}</beans:value>
		</beans:property>
		<beans:property name="url">
			<beans:value>${dataSource.url}</beans:value>
		</beans:property>
		<beans:property name="username">
			<beans:value>${dataSource.username}</beans:value>
		</beans:property>
		<beans:property name="password">
			<beans:value>${dataSource.password}</beans:value>
		</beans:property>
	</beans:bean>
    
    <!-- To be able to use @Transactional annotation -->
    <tx:annotation-driven /> 
 
    <beans:bean id="transactionManager" 
        class="org.springframework.orm.jpa.JpaTransactionManager"> 
        <beans:property name="dataSource">
			<beans:ref local="dataSource"></beans:ref>
		</beans:property>
        <beans:property name="entityManagerFactory" ref="entityManagerFactory" ></beans:property> 
    </beans:bean> 
	
	
</beans:beans>
